import{r as e,p as t}from"./vendor.860c8f03.js";const n=e=>!(!e||!e.tagName)&&("BUTTON"===e.tagName||"INPUT"===e.tagName||"SELECT"===e.tagName||"TEXTAREA"===e.tagName),s={ShiftLeft:"shift",ShiftRight:"shift",AltLeft:"alt",AltRight:"alt",MetaLeft:"meta",MetaRight:"meta",ControlLeft:"control",ControlRight:"control"},r={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",20:"capslock",27:"escape",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"ins",46:"del",91:"meta",93:"meta",224:"meta",106:"*",107:"+",109:"-",110:".",111:"/",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",ArrowUp:"Up",ArrowDown:"Down",ArrowLeft:"Left",ArrowRight:"Right"},o=e=>{console.log(":keyboard event:",e)};function i(t="keydown",i=null){const c=e("@minibus/"+t);if("undefined"==typeof window)return!1;null===i&&(i=window.document);const a=!n(i);function u(e){return e.toLowerCase().replace(/\s/,"")}function p(e){if((e=>"code"in e?s.hasOwnProperty(e.code):16===e.which||17===e.which||18===e.which||91===e.which)(e))return;if(a&&(e=>n(e.target||e.nativeEvent.target))(e))return;const t=u((e=>{let t="";const n=[];if("code"in e){const n=e.code;t=r.hasOwnProperty(e.code)?r[n]:`${n}`}else{const n=e.which;t=String.fromCharCode(n).toLowerCase(),r[n]&&(t=r[n])}return e.altKey&&n.push("Alt"),e.shiftKey&&n.push("Shift"),e.ctrlKey&&n.push("Ctrl"),e.metaKey&&n.push("Meta"),n.push(t),n.join("+")})(e)),o=c.isChannelEmpty(t);c.emit("monitor",t,!o,e),c.emit(t,e)}function l(){i&&i.addEventListener(t,p)}return l(),{subscribe:function(e,t){return c.subscribe(u(e),(e=>{e.preventDefault(),t()}))},setMonitor:function(e=!1){!0===e?c.subscribe("monitor",o):"function"==typeof e&&c.subscribe("monitor",e)},startListening:l,stopListening:function(){i&&i.removeEventListener(t,p)}}}const c=i();c.setMonitor(((e,t,n)=>{console.log(`name: ${e} ${t?"[matched]":"[not matched]"}`)}));const a=e=>{const t=document.querySelector(`.key.${e}`);t.classList.add("pressed"),window.setTimeout((()=>{t.classList.remove("pressed")}),120)};let u=null;c.subscribe("Space",(()=>a("space"))),c.subscribe("Down",(()=>a("down"))),c.subscribe("Up",(()=>a("up"))),c.subscribe("Left",(()=>a("left"))),c.subscribe("Right",(()=>a("right"))),c.subscribe("Shift+Space",(()=>a("shiftspace"))),c.subscribe("Meta+Space",(()=>a("metaspace"))),c.subscribe("Escape",(()=>a("escape"))),c.setMonitor((e=>{u&&window.clearTimeout(u);const t=document.querySelector(".monitor");t.innerHTML=`Pressed [ ${e} ]`,u=window.setTimeout((()=>{t.innerHTML="press any key"}),500)}));const p=document.getElementById("text-input"),l=i("keydown",p);let d=0;const m=()=>p.value=d;m(),l.subscribe("Down",(()=>{d--,m()})),l.subscribe("Up",(()=>{d++,m()})),l.subscribe("Escape",(()=>{d=0,m()}));const b=document.getElementById("code"),h=t.exports.highlight("\n/*\n * This is a simplified version of the code for this demo.\n * Other than the Keyboardist library, it's all Vanilla JS.\n * --------------------------------------------------------\n */\n\n\n// import the library\nimport createListener from 'keyboardist';\n\n\n// ## Global listener demo\n// --------------------------\n\n// creates a listener, by default it listens to 'keydown' events.\nconst listener = createListener();\n\n// triggers the key animation on screen\nconst pressKey = keyName => {\n  const key = document.querySelector(`.key.${keyName}`);\n  key.classList.add('pressed');\n  window.setTimeout(() => {\n    key.classList.remove('pressed');\n  }, 120);\n};\n\n// let's create a monitor to show every key press\nconst monitor = keyName => {\n  const key = document.querySelector(`.monitor`);\n  key.innerHTML = `Pressed [ ${keyName} ]`;\n  window.setTimeout(() => {\n    key.innerHTML = 'press any key';\n  }, 500);\n};\n\n//let's create the listeners\nlistener.subscribe('Space', () => pressKey('space'));\nlistener.subscribe('Down', () => pressKey('down'));\nlistener.subscribe('Up', () => pressKey('up'));\nlistener.subscribe('Left', () => pressKey('left'));\nlistener.subscribe('Right', () => pressKey('right'));\nlistener.subscribe('Shift+space', () => pressKey('shiftspace'));\nlistener.subscribe('Escape', () => pressKey('escape'));\n\n// set the monitor function\nlistener.setMonitor(monitor);\n\n\n// ## Text input demo\n// --------------------------\nconst input = document.getElementById('text-input');\nconst inputListener = createListener('keydown', input);\n\nlet val = 0;\nconst counterUp = () => {\n  val++;\n  counterUpdate();\n};\nconst counterDown = () => {\n  val--;\n  counterUpdate();\n};\nconst counterReset = () => {\n  val = 0;\n  counterUpdate();\n};\n\nconst counterUpdate = () => (input.value = val);\n\ncounterUpdate();\n\ninputListener.subscribe('Down', counterDown);\ninputListener.subscribe('Up', counterUp);\ninputListener.subscribe('Escape', counterReset);\n\n\n",t.exports.languages.javascript,"javascript");b.innerHTML='<pre class="language-javascript">'+h+"</pre>";
